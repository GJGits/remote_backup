{
	"info": {
		"_postman_id": "c4f5a84c-72a5-49f2-b703-66ed1c996dbb",
		"name": "remote_backup_auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "chunk_0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "08ff6cdc-c322-42b0-a796-821776512896",
						"exec": [
							"var combinations     = pm.environment.get(\"combinations_chunk_0\");",
							"var expected_results = pm.environment.get(\"expected_results_chunk_0\"); ",
							"",
							"if (!combinations) {",
							"  // inizializzazione array di combinazioni da testare  ",
							"  combinations = [",
							"    \"get chunks\",",
							"  ];",
							"}",
							"",
							"if (!expected_results) {",
							"  // inizializzazione array di risultati aspettati",
							"  // l'ordine degli elementi in questo array deve",
							"  // essere coerente con l'ordine dell'array delle",
							"  // combinazioni. ",
							"  expected_results = [",
							"    { entries: [",
							"        {",
							"            c_id: 0,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 1,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 2,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 3,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 4,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 5,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 6,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 7,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 8,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 9,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 10,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 11,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 12,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 13,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 14,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 15,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 16,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 17,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 18,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 19,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"    ],",
							"    last_page: 1",
							"},",
							"  ];",
							"}",
							"",
							"// Combinazione testata e relativo risultato aspettato",
							"var combination = combinations.shift();",
							"var result      = expected_results.shift();",
							"// eventuale body da passare sottoforma di stringa",
							"pm.variables.set(\"combination_chunk_0\", JSON.stringify(combination));",
							"// Set necessario affinche' le variabili siano accessibili",
							"// da test scripts",
							"pm.environment.set(\"combination_chunk_0\", combination);",
							"pm.environment.set(\"result_chunk_0\", result);",
							"pm.environment.set(\"left_chunk_0\", combinations.length);",
							"// Aggiornamento delle variabili necessario altrimenti nel pre-script",
							"// si rileggerebbe il valore iniziale ciclando all'infinito.",
							"var combinations     = pm.environment.set(\"combinations_chunk_0\", combinations);",
							"var expected_results = pm.environment.set(\"expected_results_chunk_0\", expected_results);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9423c7c8-a9b0-424f-b2bb-b1af157bf2be",
						"exec": [
							"var body = pm.environment.get(\"combination_chunk_0\");",
							"var expected_result = pm.environment.get(\"result_chunk_0\"); ",
							"var left = pm.environment.get(\"left_chunk_0\"); ",
							"",
							"if(left > 0) {",
							"  postman.setNextRequest(\"chunk_0\");",
							"} else {",
							"   postman.setNextRequest(\"chunk_1\"); ",
							"}",
							"",
							"  if ( pm.response.code === 400 ) {",
							"    pm.test(\"Check error message\", function () {",
							"        pm.expect(pm.response.json().error).to.be.eql(expected_result.error);",
							"    });",
							"  }",
							"",
							"  if (pm.response.code === 200 ) {",
							"      pm.test(\"Check token\", function () {",
							"        pm.expect(pm.response.json().entries[0].c_id).to.be.eql(expected_result.entries[0].c_id);",
							"        pm.expect(pm.response.json().entries[0].c_lastmod).to.be.eql(expected_result.entries[0].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[0].c_path).to.be.eql(expected_result.entries[0].c_path); ",
							"        pm.expect(pm.response.json().entries[0].c_username).to.be.eql(expected_result.entries[0].c_username);  ",
							"        pm.expect(pm.response.json().entries[0].num_chunks).to.be.eql(expected_result.entries[0].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[1].c_id).to.be.eql(expected_result.entries[1].c_id);",
							"        pm.expect(pm.response.json().entries[1].c_lastmod).to.be.eql(expected_result.entries[1].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[1].c_path).to.be.eql(expected_result.entries[1].c_path); ",
							"        pm.expect(pm.response.json().entries[1].c_username).to.be.eql(expected_result.entries[1].c_username);  ",
							"        pm.expect(pm.response.json().entries[1].num_chunks).to.be.eql(expected_result.entries[1].num_chunks); ",
							"        pm.expect(pm.response.json().entries[2].c_id).to.be.eql(expected_result.entries[2].c_id);",
							"        pm.expect(pm.response.json().entries[2].c_lastmod).to.be.eql(expected_result.entries[2].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[2].c_path).to.be.eql(expected_result.entries[2].c_path); ",
							"        pm.expect(pm.response.json().entries[2].c_username).to.be.eql(expected_result.entries[2].c_username);  ",
							"        pm.expect(pm.response.json().entries[2].num_chunks).to.be.eql(expected_result.entries[2].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[3].c_id).to.be.eql(expected_result.entries[3].c_id);",
							"        pm.expect(pm.response.json().entries[3].c_lastmod).to.be.eql(expected_result.entries[3].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[3].c_path).to.be.eql(expected_result.entries[3].c_path); ",
							"        pm.expect(pm.response.json().entries[3].c_username).to.be.eql(expected_result.entries[3].c_username);  ",
							"        pm.expect(pm.response.json().entries[3].num_chunks).to.be.eql(expected_result.entries[3].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[4].c_id).to.be.eql(expected_result.entries[4].c_id);",
							"        pm.expect(pm.response.json().entries[4].c_lastmod).to.be.eql(expected_result.entries[4].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[4].c_path).to.be.eql(expected_result.entries[4].c_path); ",
							"        pm.expect(pm.response.json().entries[4].c_username).to.be.eql(expected_result.entries[4].c_username);  ",
							"        pm.expect(pm.response.json().entries[4].num_chunks).to.be.eql(expected_result.entries[4].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[5].c_id).to.be.eql(expected_result.entries[5].c_id);",
							"        pm.expect(pm.response.json().entries[5].c_lastmod).to.be.eql(expected_result.entries[5].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[5].c_path).to.be.eql(expected_result.entries[5].c_path); ",
							"        pm.expect(pm.response.json().entries[5].c_username).to.be.eql(expected_result.entries[5].c_username);  ",
							"        pm.expect(pm.response.json().entries[5].num_chunks).to.be.eql(expected_result.entries[5].num_chunks); ",
							"        pm.expect(pm.response.json().entries[6].c_id).to.be.eql(expected_result.entries[6].c_id);",
							"        pm.expect(pm.response.json().entries[6].c_lastmod).to.be.eql(expected_result.entries[6].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[6].c_path).to.be.eql(expected_result.entries[6].c_path); ",
							"        pm.expect(pm.response.json().entries[6].c_username).to.be.eql(expected_result.entries[6].c_username);  ",
							"        pm.expect(pm.response.json().entries[6].num_chunks).to.be.eql(expected_result.entries[6].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[7].c_id).to.be.eql(expected_result.entries[7].c_id);",
							"        pm.expect(pm.response.json().entries[7].c_lastmod).to.be.eql(expected_result.entries[7].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[7].c_path).to.be.eql(expected_result.entries[7].c_path); ",
							"        pm.expect(pm.response.json().entries[7].c_username).to.be.eql(expected_result.entries[7].c_username);  ",
							"        pm.expect(pm.response.json().entries[7].num_chunks).to.be.eql(expected_result.entries[7].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[8].c_id).to.be.eql(expected_result.entries[8].c_id);",
							"        pm.expect(pm.response.json().entries[8].c_lastmod).to.be.eql(expected_result.entries[8].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[8].c_path).to.be.eql(expected_result.entries[8].c_path); ",
							"        pm.expect(pm.response.json().entries[8].c_username).to.be.eql(expected_result.entries[8].c_username);  ",
							"        pm.expect(pm.response.json().entries[8].num_chunks).to.be.eql(expected_result.entries[8].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[9].c_id).to.be.eql(expected_result.entries[9].c_id);",
							"        pm.expect(pm.response.json().entries[9].c_lastmod).to.be.eql(expected_result.entries[9].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[9].c_path).to.be.eql(expected_result.entries[9].c_path); ",
							"        pm.expect(pm.response.json().entries[9].c_username).to.be.eql(expected_result.entries[9].c_username);  ",
							"        pm.expect(pm.response.json().entries[9].num_chunks).to.be.eql(expected_result.entries[9].num_chunks); ",
							"        pm.expect(pm.response.json().entries[10].c_id).to.be.eql(expected_result.entries[10].c_id);",
							"        pm.expect(pm.response.json().entries[10].c_lastmod).to.be.eql(expected_result.entries[10].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[10].c_path).to.be.eql(expected_result.entries[10].c_path); ",
							"        pm.expect(pm.response.json().entries[10].c_username).to.be.eql(expected_result.entries[10].c_username);  ",
							"        pm.expect(pm.response.json().entries[10].num_chunks).to.be.eql(expected_result.entries[10].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[11].c_id).to.be.eql(expected_result.entries[11].c_id);",
							"        pm.expect(pm.response.json().entries[11].c_lastmod).to.be.eql(expected_result.entries[11].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[11].c_path).to.be.eql(expected_result.entries[11].c_path); ",
							"        pm.expect(pm.response.json().entries[11].c_username).to.be.eql(expected_result.entries[11].c_username);  ",
							"        pm.expect(pm.response.json().entries[11].num_chunks).to.be.eql(expected_result.entries[11].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[12].c_id).to.be.eql(expected_result.entries[12].c_id);",
							"        pm.expect(pm.response.json().entries[12].c_lastmod).to.be.eql(expected_result.entries[12].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[12].c_path).to.be.eql(expected_result.entries[12].c_path); ",
							"        pm.expect(pm.response.json().entries[12].c_username).to.be.eql(expected_result.entries[12].c_username);  ",
							"        pm.expect(pm.response.json().entries[12].num_chunks).to.be.eql(expected_result.entries[12].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[13].c_id).to.be.eql(expected_result.entries[13].c_id);",
							"        pm.expect(pm.response.json().entries[13].c_lastmod).to.be.eql(expected_result.entries[13].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[13].c_path).to.be.eql(expected_result.entries[13].c_path); ",
							"        pm.expect(pm.response.json().entries[13].c_username).to.be.eql(expected_result.entries[13].c_username);  ",
							"        pm.expect(pm.response.json().entries[13].num_chunks).to.be.eql(expected_result.entries[13].num_chunks); ",
							"        pm.expect(pm.response.json().entries[14].c_id).to.be.eql(expected_result.entries[14].c_id);",
							"        pm.expect(pm.response.json().entries[14].c_lastmod).to.be.eql(expected_result.entries[14].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[14].c_path).to.be.eql(expected_result.entries[14].c_path); ",
							"        pm.expect(pm.response.json().entries[14].c_username).to.be.eql(expected_result.entries[14].c_username);  ",
							"        pm.expect(pm.response.json().entries[14].num_chunks).to.be.eql(expected_result.entries[14].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[15].c_id).to.be.eql(expected_result.entries[15].c_id);",
							"        pm.expect(pm.response.json().entries[15].c_lastmod).to.be.eql(expected_result.entries[15].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[15].c_path).to.be.eql(expected_result.entries[15].c_path); ",
							"        pm.expect(pm.response.json().entries[15].c_username).to.be.eql(expected_result.entries[15].c_username);  ",
							"        pm.expect(pm.response.json().entries[15].num_chunks).to.be.eql(expected_result.entries[15].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[16].c_id).to.be.eql(expected_result.entries[16].c_id);",
							"        pm.expect(pm.response.json().entries[16].c_lastmod).to.be.eql(expected_result.entries[16].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[16].c_path).to.be.eql(expected_result.entries[16].c_path); ",
							"        pm.expect(pm.response.json().entries[16].c_username).to.be.eql(expected_result.entries[16].c_username);  ",
							"        pm.expect(pm.response.json().entries[16].num_chunks).to.be.eql(expected_result.entries[16].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[17].c_id).to.be.eql(expected_result.entries[17].c_id);",
							"        pm.expect(pm.response.json().entries[17].c_lastmod).to.be.eql(expected_result.entries[17].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[17].c_path).to.be.eql(expected_result.entries[17].c_path); ",
							"        pm.expect(pm.response.json().entries[17].c_username).to.be.eql(expected_result.entries[17].c_username);  ",
							"        pm.expect(pm.response.json().entries[17].num_chunks).to.be.eql(expected_result.entries[17].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[18].c_id).to.be.eql(expected_result.entries[18].c_id);",
							"        pm.expect(pm.response.json().entries[18].c_lastmod).to.be.eql(expected_result.entries[18].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[18].c_path).to.be.eql(expected_result.entries[18].c_path); ",
							"        pm.expect(pm.response.json().entries[18].c_username).to.be.eql(expected_result.entries[18].c_username);  ",
							"        pm.expect(pm.response.json().entries[18].num_chunks).to.be.eql(expected_result.entries[18].num_chunks); ",
							"        pm.expect(pm.response.json().entries[19].c_id).to.be.eql(expected_result.entries[19].c_id);",
							"        pm.expect(pm.response.json().entries[19].c_lastmod).to.be.eql(expected_result.entries[19].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[19].c_path).to.be.eql(expected_result.entries[19].c_path); ",
							"        pm.expect(pm.response.json().entries[19].c_username).to.be.eql(expected_result.entries[19].c_username);  ",
							"        pm.expect(pm.response.json().entries[19].num_chunks).to.be.eql(expected_result.entries[19].num_chunks);   ",
							"        pm.expect(pm.response.json().last_page).to.be.eql(expected_result.last_page);   ",
							"      });",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{combination_chunk_0}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:3200/test/database/chunks/1/0",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"test",
						"database",
						"chunks",
						"1",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "chunk_1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e37a9866-4b3a-4c99-a589-9d3bec15523e",
						"exec": [
							"var combinations     = pm.environment.get(\"combinations_chunk_1\");",
							"var expected_results = pm.environment.get(\"expected_results_chunk_1\"); ",
							"",
							"if (!combinations) {",
							"  // inizializzazione array di combinazioni da testare  ",
							"  combinations = [",
							"    \"get chunks\",",
							"  ];",
							"}",
							"",
							"if (!expected_results) {",
							"  // inizializzazione array di risultati aspettati",
							"  // l'ordine degli elementi in questo array deve",
							"  // essere coerente con l'ordine dell'array delle",
							"  // combinazioni. ",
							"  expected_results = [",
							"    { entries: [",
							"        {",
							"            c_id: 20,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 21,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 22,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 23,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"dGhyZWFkLnBkZg==\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 0,",
							"            c_lastmod: 1602506511,",
							"            c_path: \"Z2VuZXJhbGkucGRm\",",
							"            c_username: \"renato\",",
							"            num_chunks: 143",
							"        },",
							"        {",
							"            c_id: 1,",
							"            c_lastmod: 1602506511,",
							"            c_path: \"Z2VuZXJhbGkucGRm\",",
							"            c_username: \"renato\",",
							"            num_chunks: 143",
							"        },",
							"",
							"    ],",
							"    last_page: 1",
							"},",
							"  ];",
							"}",
							"",
							"// Combinazione testata e relativo risultato aspettato",
							"var combination = combinations.shift();",
							"var result      = expected_results.shift();",
							"// eventuale body da passare sottoforma di stringa",
							"pm.variables.set(\"combination_chunk_1\", JSON.stringify(combination));",
							"// Set necessario affinche' le variabili siano accessibili",
							"// da test scripts",
							"pm.environment.set(\"combination_chunk_1\", combination);",
							"pm.environment.set(\"result_chunk_1\", result);",
							"pm.environment.set(\"left_chunk_1\", combinations.length);",
							"// Aggiornamento delle variabili necessario altrimenti nel pre-script",
							"// si rileggerebbe il valore iniziale ciclando all'infinito.",
							"var combinations     = pm.environment.set(\"combinations_chunk_1\", combinations);",
							"var expected_results = pm.environment.set(\"expected_results_chunk_1\", expected_results);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4538b4d1-75fc-4be6-b151-d8c1e66f5843",
						"exec": [
							"var body = pm.environment.get(\"combination_chunk_1\");",
							"var expected_result = pm.environment.get(\"result_chunk_1\"); ",
							"var left = pm.environment.get(\"left_chunk_1\"); ",
							"",
							"if(left > 0) {",
							"  postman.setNextRequest(\"chunk_1\");",
							"} else {",
							"   postman.setNextRequest(\"filesystem_0\"); ",
							"}",
							"",
							"  if ( pm.response.code === 400 ) {",
							"    pm.test(\"Check error message\", function () {",
							"        pm.expect(pm.response.json().error).to.be.eql(expected_result.error);",
							"    });",
							"  }",
							"",
							"  if (pm.response.code === 200 ) {",
							"      pm.test(\"Check token\", function () {",
							"        pm.expect(pm.response.json().entries[0].c_id).to.be.eql(expected_result.entries[0].c_id);",
							"        pm.expect(pm.response.json().entries[0].c_lastmod).to.be.eql(expected_result.entries[0].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[0].c_path).to.be.eql(expected_result.entries[0].c_path); ",
							"        pm.expect(pm.response.json().entries[0].c_username).to.be.eql(expected_result.entries[0].c_username);  ",
							"        pm.expect(pm.response.json().entries[0].num_chunks).to.be.eql(expected_result.entries[0].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[1].c_id).to.be.eql(expected_result.entries[1].c_id);",
							"        pm.expect(pm.response.json().entries[1].c_lastmod).to.be.eql(expected_result.entries[1].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[1].c_path).to.be.eql(expected_result.entries[1].c_path); ",
							"        pm.expect(pm.response.json().entries[1].c_username).to.be.eql(expected_result.entries[1].c_username);  ",
							"        pm.expect(pm.response.json().entries[1].num_chunks).to.be.eql(expected_result.entries[1].num_chunks); ",
							"        pm.expect(pm.response.json().entries[2].c_id).to.be.eql(expected_result.entries[2].c_id);",
							"        pm.expect(pm.response.json().entries[2].c_lastmod).to.be.eql(expected_result.entries[2].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[2].c_path).to.be.eql(expected_result.entries[2].c_path); ",
							"        pm.expect(pm.response.json().entries[2].c_username).to.be.eql(expected_result.entries[2].c_username);  ",
							"        pm.expect(pm.response.json().entries[2].num_chunks).to.be.eql(expected_result.entries[2].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[3].c_id).to.be.eql(expected_result.entries[3].c_id);",
							"        pm.expect(pm.response.json().entries[3].c_lastmod).to.be.eql(expected_result.entries[3].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[3].c_path).to.be.eql(expected_result.entries[3].c_path); ",
							"        pm.expect(pm.response.json().entries[3].c_username).to.be.eql(expected_result.entries[3].c_username);  ",
							"        pm.expect(pm.response.json().entries[3].num_chunks).to.be.eql(expected_result.entries[3].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[4].c_id).to.be.eql(expected_result.entries[4].c_id);",
							"        pm.expect(pm.response.json().entries[4].c_lastmod).to.be.eql(expected_result.entries[4].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[4].c_path).to.be.eql(expected_result.entries[4].c_path); ",
							"        pm.expect(pm.response.json().entries[4].c_username).to.be.eql(expected_result.entries[4].c_username);  ",
							"        pm.expect(pm.response.json().entries[4].num_chunks).to.be.eql(expected_result.entries[4].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[5].c_id).to.be.eql(expected_result.entries[5].c_id);",
							"        pm.expect(pm.response.json().entries[5].c_lastmod).to.be.eql(expected_result.entries[5].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[5].c_path).to.be.eql(expected_result.entries[5].c_path); ",
							"        pm.expect(pm.response.json().entries[5].c_username).to.be.eql(expected_result.entries[5].c_username);  ",
							"        pm.expect(pm.response.json().entries[5].num_chunks).to.be.eql(expected_result.entries[5].num_chunks);  ",
							"        pm.expect(pm.response.json().last_page).to.be.eql(expected_result.last_page);   ",
							"      });",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{combination_chunk_1}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:3200/test/database/chunks/1/1",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"test",
						"database",
						"chunks",
						"1",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "filesystem_0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6fae902d-f7e0-498a-b7fc-4a0a74fa1504",
						"exec": [
							"var combinations     = pm.environment.get(\"combinations_filesystem_0\");",
							"var expected_results = pm.environment.get(\"expected_results_filesystem_0\"); ",
							"",
							"if (!combinations) {",
							"  // inizializzazione array di combinazioni da testare  ",
							"  combinations = [",
							"    \"get chunks filesystem\",",
							"  ];",
							"}",
							"",
							"if (!expected_results) {",
							"  // inizializzazione array di risultati aspettati",
							"  // l'ordine degli elementi in questo array deve",
							"  // essere coerente con l'ordine dell'array delle",
							"  // combinazioni. ",
							"  expected_results = [",
							"    { entries: [",
							"        {",
							"            c_id: 0,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 1,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 2,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 3,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 4,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 5,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 6,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 7,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 8,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 9,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 10,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 11,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 12,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 13,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 14,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 15,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 16,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 17,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 18,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 19,",
							"            c_size: 4096,",
							"        },",
							"    ],",
							"    last_page: 1",
							"},",
							"  ];",
							"}",
							"",
							"// Combinazione testata e relativo risultato aspettato",
							"var combination = combinations.shift();",
							"var result      = expected_results.shift();",
							"// eventuale body da passare sottoforma di stringa",
							"pm.variables.set(\"combination_filesystem_0\", JSON.stringify(combination));",
							"// Set necessario affinche' le variabili siano accessibili",
							"// da test scripts",
							"pm.environment.set(\"combination_filesystem_0\", combination);",
							"pm.environment.set(\"result_filesystem_0\", result);",
							"pm.environment.set(\"left_filesystem_0\", combinations.length);",
							"// Aggiornamento delle variabili necessario altrimenti nel pre-script",
							"// si rileggerebbe il valore iniziale ciclando all'infinito.",
							"var combinations     = pm.environment.set(\"combinations_filesystem_0\", combinations);",
							"var expected_results = pm.environment.set(\"expected_results_filesystem_0\", expected_results);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "34dc4294-b35a-417b-8b6f-1bb8c78f8080",
						"exec": [
							"var body = pm.environment.get(\"combination_filesystem_0\");",
							"var expected_result = pm.environment.get(\"result_filesystem_0\"); ",
							"var left = pm.environment.get(\"left_filesystem_0\"); ",
							"",
							"if(left > 0) {",
							"  postman.setNextRequest(\"filesystem_0\");",
							"} else {",
							"   postman.setNextRequest(\"filesystem_1\"); ",
							"}",
							"",
							"  if ( pm.response.code === 400 ) {",
							"    pm.test(\"Check error message\", function () {",
							"        pm.expect(pm.response.json().error).to.be.eql(expected_result.error);",
							"    });",
							"  }",
							"",
							"  if (pm.response.code === 200 ) {",
							"      pm.test(\"Check token\", function () {",
							"        pm.expect(pm.response.json().entries[0].c_id).to.be.eql(expected_result.entries[0].c_id); ",
							"        pm.expect(pm.response.json().entries[0].c_size).to.be.eql(expected_result.entries[0].c_size); ",
							"        pm.expect(pm.response.json().entries[1].c_id).to.be.eql(expected_result.entries[1].c_id); ",
							"        pm.expect(pm.response.json().entries[1].c_size).to.be.eql(expected_result.entries[1].c_size); ",
							"        pm.expect(pm.response.json().entries[2].c_id).to.be.eql(expected_result.entries[2].c_id);",
							"        pm.expect(pm.response.json().entries[2].c_size).to.be.eql(expected_result.entries[2].c_size); ",
							" ",
							"      });",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{combination_filesystem_0}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:3200/test/filesystem/renato/dGhyZWFkLnBkZg==/0",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"test",
						"filesystem",
						"renato",
						"dGhyZWFkLnBkZg==",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "filesystem_1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0ad73ba1-fbac-4da2-9e24-9c3c9646c902",
						"exec": [
							"var combinations     = pm.environment.get(\"combinations_filesystem_1\");",
							"var expected_results = pm.environment.get(\"expected_results_filesystem_1\"); ",
							"",
							"if (!combinations) {",
							"  // inizializzazione array di combinazioni da testare  ",
							"  combinations = [",
							"    \"get chunks filesystem _1\",",
							"  ];",
							"}",
							"",
							"if (!expected_results) {",
							"  // inizializzazione array di risultati aspettati",
							"  // l'ordine degli elementi in questo array deve",
							"  // essere coerente con l'ordine dell'array delle",
							"  // combinazioni. ",
							"  expected_results = [",
							"    { entries: [",
							"        {",
							"            c_id: 20,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 21,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 22,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 23,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 0,",
							"            c_size: 4096,",
							"        },",
							"        {",
							"            c_id: 1,",
							"            c_size: 4096,",
							"        },",
							"    ],",
							"    last_page: 1",
							"},",
							"  ];",
							"}",
							"",
							"// Combinazione testata e relativo risultato aspettato",
							"var combination = combinations.shift();",
							"var result      = expected_results.shift();",
							"// eventuale body da passare sottoforma di stringa",
							"pm.variables.set(\"combination_filesystem_1\", JSON.stringify(combination));",
							"// Set necessario affinche' le variabili siano accessibili",
							"// da test scripts",
							"pm.environment.set(\"combination_filesystem_1\", combination);",
							"pm.environment.set(\"result_filesystem_1\", result);",
							"pm.environment.set(\"left_filesystem_1\", combinations.length);",
							"// Aggiornamento delle variabili necessario altrimenti nel pre-script",
							"// si rileggerebbe il valore iniziale ciclando all'infinito.",
							"var combinations     = pm.environment.set(\"combinations_filesystem_1\", combinations);",
							"var expected_results = pm.environment.set(\"expected_results_filesystem_1\", expected_results);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6beea368-d213-47c3-9694-5140bd322710",
						"exec": [
							"var body = pm.environment.get(\"combination_filesystem_1\");",
							"var expected_result = pm.environment.get(\"result_filesystem_1\"); ",
							"var left = pm.environment.get(\"left_filesystem_1\"); ",
							"",
							"if(left > 0) {",
							"  postman.setNextRequest(\"filesystem_1\");",
							"} else {",
							"   postman.setNextRequest(\"rename\"); ",
							"}",
							"",
							"  if ( pm.response.code === 400 ) {",
							"    pm.test(\"Check error message\", function () {",
							"        pm.expect(pm.response.json().error).to.be.eql(expected_result.error);",
							"    });",
							"  }",
							"",
							"  if (pm.response.code === 200 ) {",
							"      pm.test(\"Check token\", function () {",
							"        pm.expect(pm.response.json().entries[0].c_id).to.be.eql(expected_result.entries[0].c_id); ",
							"        pm.expect(pm.response.json().entries[0].c_size).to.be.eql(expected_result.entries[0].c_size); ",
							"        pm.expect(pm.response.json().entries[1].c_id).to.be.eql(expected_result.entries[1].c_id); ",
							"        pm.expect(pm.response.json().entries[1].c_size).to.be.eql(expected_result.entries[1].c_size); ",
							"        pm.expect(pm.response.json().entries[2].c_id).to.be.eql(expected_result.entries[2].c_id);",
							"        pm.expect(pm.response.json().entries[2].c_size).to.be.eql(expected_result.entries[2].c_size); ",
							" ",
							"      });",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{combination_filesystem_1}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:3200/test/filesystem/renato/dGhyZWFkLnBkZg==/1",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"test",
						"filesystem",
						"renato",
						"dGhyZWFkLnBkZg==",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "rename",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bc297d7a-3c7d-4247-a6fb-2b9543494ebf",
						"exec": [
							"postman.setNextRequest(\"chunk_0_renamed\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYiI6MSwiZGV2aWNlX2lkIjoyLCJleHAiOjE2MDMyNjkxNjAsInN1YiI6InJlbmF0byJ9.eyJzaWduIjoiRnJ6VzNKQlBUQnYzWTdRWC9QT3dhVWIwRXBvVDFjeEpRY0JBeWlIWjNsRT0ifQ==",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://0.0.0.0:3200/chunk/dGhyZWFkLnBkZg==/pippo",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"chunk",
						"dGhyZWFkLnBkZg==",
						"pippo"
					]
				}
			},
			"response": []
		},
		{
			"name": "chunk_0_renamed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "81a0deb4-5398-4336-ac2f-53cc7333f007",
						"exec": [
							"var combinations     = pm.environment.get(\"combinations_chunk_0_renamed\");",
							"var expected_results = pm.environment.get(\"expected_results_chunk_0_renamed\"); ",
							"",
							"if (!combinations) {",
							"  // inizializzazione array di combinazioni da testare  ",
							"  combinations = [",
							"    \"get chunks\",",
							"  ];",
							"}",
							"",
							"if (!expected_results) {",
							"  // inizializzazione array di risultati aspettati",
							"  // l'ordine degli elementi in questo array deve",
							"  // essere coerente con l'ordine dell'array delle",
							"  // combinazioni. ",
							"  expected_results = [",
							"    { entries: [",
							"        {",
							"            c_id: 0,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 1,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 2,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 3,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 4,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 5,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 6,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 7,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 8,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 9,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 10,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 11,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 12,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 13,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 14,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 15,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 16,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 17,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 18,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 19,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"    ],",
							"    last_page: 1",
							"},",
							"  ];",
							"}",
							"",
							"// Combinazione testata e relativo risultato aspettato",
							"var combination = combinations.shift();",
							"var result      = expected_results.shift();",
							"// eventuale body da passare sottoforma di stringa",
							"pm.variables.set(\"combination_chunk_0_renamed\", JSON.stringify(combination));",
							"// Set necessario affinche' le variabili siano accessibili",
							"// da test scripts",
							"pm.environment.set(\"combination_chunk_0_renamed\", combination);",
							"pm.environment.set(\"result_chunk_0_renamed\", result);",
							"pm.environment.set(\"left_chunk_0_renamed\", combinations.length);",
							"// Aggiornamento delle variabili necessario altrimenti nel pre-script",
							"// si rileggerebbe il valore iniziale ciclando all'infinito.",
							"var combinations     = pm.environment.set(\"combinations_chunk_0_renamed\", combinations);",
							"var expected_results = pm.environment.set(\"expected_results_chunk_0_renamed\", expected_results);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e8dd1876-ec02-4b8d-a113-8c2e664656d3",
						"exec": [
							"var body = pm.environment.get(\"combination_chunk_0_renamed\");",
							"var expected_result = pm.environment.get(\"result_chunk_0_renamed\"); ",
							"var left = pm.environment.get(\"left_chunk_0_renamed\"); ",
							"",
							"if(left > 0) {",
							"  postman.setNextRequest(\"chunk_0_renamed\");",
							"} else {",
							"   postman.setNextRequest(\"chunk_1_renamed\"); ",
							"}",
							"",
							"  if ( pm.response.code === 400 ) {",
							"    pm.test(\"Check error message\", function () {",
							"        pm.expect(pm.response.json().error).to.be.eql(expected_result.error);",
							"    });",
							"  }",
							"",
							"  if (pm.response.code === 200 ) {",
							"      pm.test(\"Check token\", function () {",
							"        pm.expect(pm.response.json().entries[0].c_id).to.be.eql(expected_result.entries[0].c_id);",
							"        pm.expect(pm.response.json().entries[0].c_lastmod).to.be.eql(expected_result.entries[0].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[0].c_path).to.be.eql(expected_result.entries[0].c_path); ",
							"        pm.expect(pm.response.json().entries[0].c_username).to.be.eql(expected_result.entries[0].c_username);  ",
							"        pm.expect(pm.response.json().entries[0].num_chunks).to.be.eql(expected_result.entries[0].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[1].c_id).to.be.eql(expected_result.entries[1].c_id);",
							"        pm.expect(pm.response.json().entries[1].c_lastmod).to.be.eql(expected_result.entries[1].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[1].c_path).to.be.eql(expected_result.entries[1].c_path); ",
							"        pm.expect(pm.response.json().entries[1].c_username).to.be.eql(expected_result.entries[1].c_username);  ",
							"        pm.expect(pm.response.json().entries[1].num_chunks).to.be.eql(expected_result.entries[1].num_chunks); ",
							"        pm.expect(pm.response.json().entries[2].c_id).to.be.eql(expected_result.entries[2].c_id);",
							"        pm.expect(pm.response.json().entries[2].c_lastmod).to.be.eql(expected_result.entries[2].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[2].c_path).to.be.eql(expected_result.entries[2].c_path); ",
							"        pm.expect(pm.response.json().entries[2].c_username).to.be.eql(expected_result.entries[2].c_username);  ",
							"        pm.expect(pm.response.json().entries[2].num_chunks).to.be.eql(expected_result.entries[2].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[3].c_id).to.be.eql(expected_result.entries[3].c_id);",
							"        pm.expect(pm.response.json().entries[3].c_lastmod).to.be.eql(expected_result.entries[3].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[3].c_path).to.be.eql(expected_result.entries[3].c_path); ",
							"        pm.expect(pm.response.json().entries[3].c_username).to.be.eql(expected_result.entries[3].c_username);  ",
							"        pm.expect(pm.response.json().entries[3].num_chunks).to.be.eql(expected_result.entries[3].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[4].c_id).to.be.eql(expected_result.entries[4].c_id);",
							"        pm.expect(pm.response.json().entries[4].c_lastmod).to.be.eql(expected_result.entries[4].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[4].c_path).to.be.eql(expected_result.entries[4].c_path); ",
							"        pm.expect(pm.response.json().entries[4].c_username).to.be.eql(expected_result.entries[4].c_username);  ",
							"        pm.expect(pm.response.json().entries[4].num_chunks).to.be.eql(expected_result.entries[4].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[5].c_id).to.be.eql(expected_result.entries[5].c_id);",
							"        pm.expect(pm.response.json().entries[5].c_lastmod).to.be.eql(expected_result.entries[5].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[5].c_path).to.be.eql(expected_result.entries[5].c_path); ",
							"        pm.expect(pm.response.json().entries[5].c_username).to.be.eql(expected_result.entries[5].c_username);  ",
							"        pm.expect(pm.response.json().entries[5].num_chunks).to.be.eql(expected_result.entries[5].num_chunks); ",
							"        pm.expect(pm.response.json().entries[6].c_id).to.be.eql(expected_result.entries[6].c_id);",
							"        pm.expect(pm.response.json().entries[6].c_lastmod).to.be.eql(expected_result.entries[6].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[6].c_path).to.be.eql(expected_result.entries[6].c_path); ",
							"        pm.expect(pm.response.json().entries[6].c_username).to.be.eql(expected_result.entries[6].c_username);  ",
							"        pm.expect(pm.response.json().entries[6].num_chunks).to.be.eql(expected_result.entries[6].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[7].c_id).to.be.eql(expected_result.entries[7].c_id);",
							"        pm.expect(pm.response.json().entries[7].c_lastmod).to.be.eql(expected_result.entries[7].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[7].c_path).to.be.eql(expected_result.entries[7].c_path); ",
							"        pm.expect(pm.response.json().entries[7].c_username).to.be.eql(expected_result.entries[7].c_username);  ",
							"        pm.expect(pm.response.json().entries[7].num_chunks).to.be.eql(expected_result.entries[7].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[8].c_id).to.be.eql(expected_result.entries[8].c_id);",
							"        pm.expect(pm.response.json().entries[8].c_lastmod).to.be.eql(expected_result.entries[8].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[8].c_path).to.be.eql(expected_result.entries[8].c_path); ",
							"        pm.expect(pm.response.json().entries[8].c_username).to.be.eql(expected_result.entries[8].c_username);  ",
							"        pm.expect(pm.response.json().entries[8].num_chunks).to.be.eql(expected_result.entries[8].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[9].c_id).to.be.eql(expected_result.entries[9].c_id);",
							"        pm.expect(pm.response.json().entries[9].c_lastmod).to.be.eql(expected_result.entries[9].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[9].c_path).to.be.eql(expected_result.entries[9].c_path); ",
							"        pm.expect(pm.response.json().entries[9].c_username).to.be.eql(expected_result.entries[9].c_username);  ",
							"        pm.expect(pm.response.json().entries[9].num_chunks).to.be.eql(expected_result.entries[9].num_chunks); ",
							"        pm.expect(pm.response.json().entries[10].c_id).to.be.eql(expected_result.entries[10].c_id);",
							"        pm.expect(pm.response.json().entries[10].c_lastmod).to.be.eql(expected_result.entries[10].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[10].c_path).to.be.eql(expected_result.entries[10].c_path); ",
							"        pm.expect(pm.response.json().entries[10].c_username).to.be.eql(expected_result.entries[10].c_username);  ",
							"        pm.expect(pm.response.json().entries[10].num_chunks).to.be.eql(expected_result.entries[10].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[11].c_id).to.be.eql(expected_result.entries[11].c_id);",
							"        pm.expect(pm.response.json().entries[11].c_lastmod).to.be.eql(expected_result.entries[11].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[11].c_path).to.be.eql(expected_result.entries[11].c_path); ",
							"        pm.expect(pm.response.json().entries[11].c_username).to.be.eql(expected_result.entries[11].c_username);  ",
							"        pm.expect(pm.response.json().entries[11].num_chunks).to.be.eql(expected_result.entries[11].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[12].c_id).to.be.eql(expected_result.entries[12].c_id);",
							"        pm.expect(pm.response.json().entries[12].c_lastmod).to.be.eql(expected_result.entries[12].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[12].c_path).to.be.eql(expected_result.entries[12].c_path); ",
							"        pm.expect(pm.response.json().entries[12].c_username).to.be.eql(expected_result.entries[12].c_username);  ",
							"        pm.expect(pm.response.json().entries[12].num_chunks).to.be.eql(expected_result.entries[12].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[13].c_id).to.be.eql(expected_result.entries[13].c_id);",
							"        pm.expect(pm.response.json().entries[13].c_lastmod).to.be.eql(expected_result.entries[13].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[13].c_path).to.be.eql(expected_result.entries[13].c_path); ",
							"        pm.expect(pm.response.json().entries[13].c_username).to.be.eql(expected_result.entries[13].c_username);  ",
							"        pm.expect(pm.response.json().entries[13].num_chunks).to.be.eql(expected_result.entries[13].num_chunks); ",
							"        pm.expect(pm.response.json().entries[14].c_id).to.be.eql(expected_result.entries[14].c_id);",
							"        pm.expect(pm.response.json().entries[14].c_lastmod).to.be.eql(expected_result.entries[14].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[14].c_path).to.be.eql(expected_result.entries[14].c_path); ",
							"        pm.expect(pm.response.json().entries[14].c_username).to.be.eql(expected_result.entries[14].c_username);  ",
							"        pm.expect(pm.response.json().entries[14].num_chunks).to.be.eql(expected_result.entries[14].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[15].c_id).to.be.eql(expected_result.entries[15].c_id);",
							"        pm.expect(pm.response.json().entries[15].c_lastmod).to.be.eql(expected_result.entries[15].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[15].c_path).to.be.eql(expected_result.entries[15].c_path); ",
							"        pm.expect(pm.response.json().entries[15].c_username).to.be.eql(expected_result.entries[15].c_username);  ",
							"        pm.expect(pm.response.json().entries[15].num_chunks).to.be.eql(expected_result.entries[15].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[16].c_id).to.be.eql(expected_result.entries[16].c_id);",
							"        pm.expect(pm.response.json().entries[16].c_lastmod).to.be.eql(expected_result.entries[16].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[16].c_path).to.be.eql(expected_result.entries[16].c_path); ",
							"        pm.expect(pm.response.json().entries[16].c_username).to.be.eql(expected_result.entries[16].c_username);  ",
							"        pm.expect(pm.response.json().entries[16].num_chunks).to.be.eql(expected_result.entries[16].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[17].c_id).to.be.eql(expected_result.entries[17].c_id);",
							"        pm.expect(pm.response.json().entries[17].c_lastmod).to.be.eql(expected_result.entries[17].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[17].c_path).to.be.eql(expected_result.entries[17].c_path); ",
							"        pm.expect(pm.response.json().entries[17].c_username).to.be.eql(expected_result.entries[17].c_username);  ",
							"        pm.expect(pm.response.json().entries[17].num_chunks).to.be.eql(expected_result.entries[17].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[18].c_id).to.be.eql(expected_result.entries[18].c_id);",
							"        pm.expect(pm.response.json().entries[18].c_lastmod).to.be.eql(expected_result.entries[18].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[18].c_path).to.be.eql(expected_result.entries[18].c_path); ",
							"        pm.expect(pm.response.json().entries[18].c_username).to.be.eql(expected_result.entries[18].c_username);  ",
							"        pm.expect(pm.response.json().entries[18].num_chunks).to.be.eql(expected_result.entries[18].num_chunks); ",
							"        pm.expect(pm.response.json().entries[19].c_id).to.be.eql(expected_result.entries[19].c_id);",
							"        pm.expect(pm.response.json().entries[19].c_lastmod).to.be.eql(expected_result.entries[19].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[19].c_path).to.be.eql(expected_result.entries[19].c_path); ",
							"        pm.expect(pm.response.json().entries[19].c_username).to.be.eql(expected_result.entries[19].c_username);  ",
							"        pm.expect(pm.response.json().entries[19].num_chunks).to.be.eql(expected_result.entries[19].num_chunks);   ",
							"        pm.expect(pm.response.json().last_page).to.be.eql(expected_result.last_page);   ",
							"      });",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{combination_chunk_0_renamed}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:3200/test/database/chunks/1/0",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"test",
						"database",
						"chunks",
						"1",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "chunk_1_renamed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a1f73548-dd36-4903-be57-c4f643856021",
						"exec": [
							"var combinations     = pm.environment.get(\"combinations_chunk_1_renamed\");",
							"var expected_results = pm.environment.get(\"expected_results_chunk_1_renamed\"); ",
							"",
							"if (!combinations) {",
							"  // inizializzazione array di combinazioni da testare  ",
							"  combinations = [",
							"    \"get chunks\",",
							"  ];",
							"}",
							"",
							"if (!expected_results) {",
							"  // inizializzazione array di risultati aspettati",
							"  // l'ordine degli elementi in questo array deve",
							"  // essere coerente con l'ordine dell'array delle",
							"  // combinazioni. ",
							"  expected_results = [",
							"    { entries: [",
							"        {",
							"            c_id: 20,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 21,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 22,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 23,",
							"            c_lastmod: 1602506513,",
							"            c_path: \"pippo\",",
							"            c_username: \"renato\",",
							"            num_chunks: 108",
							"        },",
							"        {",
							"            c_id: 0,",
							"            c_lastmod: 1602506511,",
							"            c_path: \"Z2VuZXJhbGkucGRm\",",
							"            c_username: \"renato\",",
							"            num_chunks: 143",
							"        },",
							"        {",
							"            c_id: 1,",
							"            c_lastmod: 1602506511,",
							"            c_path: \"Z2VuZXJhbGkucGRm\",",
							"            c_username: \"renato\",",
							"            num_chunks: 143",
							"        },",
							"",
							"    ],",
							"    last_page: 1",
							"},",
							"  ];",
							"}",
							"",
							"// Combinazione testata e relativo risultato aspettato",
							"var combination = combinations.shift();",
							"var result      = expected_results.shift();",
							"// eventuale body da passare sottoforma di stringa",
							"pm.variables.set(\"combination_chunk_1_renamed\", JSON.stringify(combination));",
							"// Set necessario affinche' le variabili siano accessibili",
							"// da test scripts",
							"pm.environment.set(\"combination_chunk_1_renamed\", combination);",
							"pm.environment.set(\"result_chunk_1_renamed\", result);",
							"pm.environment.set(\"left_chunk_1_renamed\", combinations.length);",
							"// Aggiornamento delle variabili necessario altrimenti nel pre-script",
							"// si rileggerebbe il valore iniziale ciclando all'infinito.",
							"var combinations     = pm.environment.set(\"combinations_chunk_1_renamed\", combinations);",
							"var expected_results = pm.environment.set(\"expected_results_chunk_1_renamed\", expected_results);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "89c15247-2608-4576-af41-b902854bbc9a",
						"exec": [
							"var body = pm.environment.get(\"combination_chunk_1_renamed\");",
							"var expected_result = pm.environment.get(\"result_chunk_1_renamed\"); ",
							"var left = pm.environment.get(\"left_chunk_1_renamed\"); ",
							"",
							"if(left > 0) {",
							"  postman.setNextRequest(\"chunk_1_renamed\");",
							"} else {",
							"   postman.setNextRequest(null); ",
							"}",
							"",
							"  if ( pm.response.code === 400 ) {",
							"    pm.test(\"Check error message\", function () {",
							"        pm.expect(pm.response.json().error).to.be.eql(expected_result.error);",
							"    });",
							"  }",
							"",
							"  if (pm.response.code === 200 ) {",
							"      pm.test(\"Check token\", function () {",
							"        pm.expect(pm.response.json().entries[0].c_id).to.be.eql(expected_result.entries[0].c_id);",
							"        pm.expect(pm.response.json().entries[0].c_lastmod).to.be.eql(expected_result.entries[0].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[0].c_path).to.be.eql(expected_result.entries[0].c_path); ",
							"        pm.expect(pm.response.json().entries[0].c_username).to.be.eql(expected_result.entries[0].c_username);  ",
							"        pm.expect(pm.response.json().entries[0].num_chunks).to.be.eql(expected_result.entries[0].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[1].c_id).to.be.eql(expected_result.entries[1].c_id);",
							"        pm.expect(pm.response.json().entries[1].c_lastmod).to.be.eql(expected_result.entries[1].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[1].c_path).to.be.eql(expected_result.entries[1].c_path); ",
							"        pm.expect(pm.response.json().entries[1].c_username).to.be.eql(expected_result.entries[1].c_username);  ",
							"        pm.expect(pm.response.json().entries[1].num_chunks).to.be.eql(expected_result.entries[1].num_chunks); ",
							"        pm.expect(pm.response.json().entries[2].c_id).to.be.eql(expected_result.entries[2].c_id);",
							"        pm.expect(pm.response.json().entries[2].c_lastmod).to.be.eql(expected_result.entries[2].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[2].c_path).to.be.eql(expected_result.entries[2].c_path); ",
							"        pm.expect(pm.response.json().entries[2].c_username).to.be.eql(expected_result.entries[2].c_username);  ",
							"        pm.expect(pm.response.json().entries[2].num_chunks).to.be.eql(expected_result.entries[2].num_chunks);   ",
							"        pm.expect(pm.response.json().entries[3].c_id).to.be.eql(expected_result.entries[3].c_id);",
							"        pm.expect(pm.response.json().entries[3].c_lastmod).to.be.eql(expected_result.entries[3].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[3].c_path).to.be.eql(expected_result.entries[3].c_path); ",
							"        pm.expect(pm.response.json().entries[3].c_username).to.be.eql(expected_result.entries[3].c_username);  ",
							"        pm.expect(pm.response.json().entries[3].num_chunks).to.be.eql(expected_result.entries[3].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[4].c_id).to.be.eql(expected_result.entries[4].c_id);",
							"        pm.expect(pm.response.json().entries[4].c_lastmod).to.be.eql(expected_result.entries[4].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[4].c_path).to.be.eql(expected_result.entries[4].c_path); ",
							"        pm.expect(pm.response.json().entries[4].c_username).to.be.eql(expected_result.entries[4].c_username);  ",
							"        pm.expect(pm.response.json().entries[4].num_chunks).to.be.eql(expected_result.entries[4].num_chunks);  ",
							"        pm.expect(pm.response.json().entries[5].c_id).to.be.eql(expected_result.entries[5].c_id);",
							"        pm.expect(pm.response.json().entries[5].c_lastmod).to.be.eql(expected_result.entries[5].c_lastmod); ",
							"        pm.expect(pm.response.json().entries[5].c_path).to.be.eql(expected_result.entries[5].c_path); ",
							"        pm.expect(pm.response.json().entries[5].c_username).to.be.eql(expected_result.entries[5].c_username);  ",
							"        pm.expect(pm.response.json().entries[5].num_chunks).to.be.eql(expected_result.entries[5].num_chunks);  ",
							"        pm.expect(pm.response.json().last_page).to.be.eql(expected_result.last_page);   ",
							"      });",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{combination_chunk_1_renamed}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:3200/test/database/chunks/1/1",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"test",
						"database",
						"chunks",
						"1",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}