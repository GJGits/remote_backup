{
	"info": {
		"_postman_id": "a7f4adc9-e039-442d-845c-dc5dc25a4c16",
		"name": "remote_backup_noauth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "signup",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1c0325dd-6d99-47cc-b363-217600447862",
						"exec": [
							"var combinations     = pm.environment.get(\"combinations_signup\");",
							"var expected_results = pm.environment.get(\"expected_results_signup\"); ",
							"",
							"if (!combinations) {",
							"  // inizializzazione array di combinazioni da testare  ",
							"  combinations = [",
							"    \"ciao\",",
							"    {},",
							"    {user: \"hello\"},",
							"    {username: \"hello\"},",
							"    {pas: \"hello\"},",
							"    {password: \"hello\"},",
							"    {paco: \"hello\"},",
							"    {password_confirm: \"hello\"},",
							"    {mac_address: \"hello\"},",
							"    {username: \"hello\", password: \"hithere\"},",
							"    {username: \"hello\", password_confirm: \"hithere\"},",
							"    {username: \"hello\", mac_address: \"hithere\"},",
							"    {password: \"hello\", password_confirm: \"hithere\"},",
							"    {password: \"hello\", mac_address: \"hithere\"},",
							"    {password_confirm: \"hello\", mac_address: \"hithere\"},",
							"    {username: \"hello\", password: \"hithere\", password_confirm: \"abc\"},",
							"    {username: \"hithere\", password_confirm: \"abc\", mac_address: \"abc\"},",
							"    {password: \"hithere\", password_confirm: \"abc\", mac_address: \"abc\"},",
							"    {username: 1, password: \"hithere\", password_confirm: \"hithere\", mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"renato\", password: 1, password_confirm: \"hithere\", mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"renato\", password: \"hithere\", password_confirm: 1, mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"renato\", password: \"hithere\", password_confirm: \"hithere\", mac_address: 1},",
							"    {username: 1, password: true, password_confirm: \"hithere\", mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: 1, password: \"true\", password_confirm: true, mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: 1, password: \"true\", password_confirm: \"hithere\", mac_address: true},",
							"    {username: \"1\", password: true, password_confirm: false, mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"1\", password: true, password_confirm: \"hithere\", mac_address: false},",
							"    {username: \"1\", password: \"true\", password_confirm: 1, mac_address: false},",
							"    {username: 1, password: true, password_confirm: 1, mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: 1, password: true, password_confirm: \"hithere\", mac_address: 1},",
							"    {username: \"1\", password: true, password_confirm: false, mac_address: 1},",
							"    {username: 1, password: true, password_confirm: 0, mac_address: 1},",
							"    {use: \"aa\", pas: \"true\", paco: \"0\", mac: \"aaa\"},",
							"    {username: \"aa\", pas: \"true\", paco: \"0\", mac: \"aaa\"},",
							"    {username: \"aa\", passsword: \"true\", paco: \"0\", mac: \"aaa\"},",
							"    {username: \"aa\", password: \"true\", password_confirm: \"0\", mac: \"aaa\"},",
							"    {username: \"renato!\", password: \"123456\", password_confirm: \"123456\", mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"renatÃ²\", password: \"123456\", password_confirm: \"123456\", mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"ren at0\", password: \"123456\", password_confirm: \"123456\", mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"renato\", password: \"123456\", password_confirm: \"123456\", mac_address: \"aa:bb:cc:dd:ee:ff:aa\"},  ",
							"    {username: \"renato\", password: \"123456\", password_confirm: \"123456\", mac_address: \"aa:bb:cc:dd:ee:ff\"},  ",
							"    {username: \"panda\", password: \"123456\", password_confirm: \"123456\", mac_address: \"aa:bb:cc:dd:ee:ff\"},  ",
							"    {username: \"renato\", password: \"123\", password_confirm: \"123\", mac_address: \"aa:bb:cc:dd:ee:ff\"},  ",
							"  ];",
							"}",
							"",
							"if (!expected_results) {",
							"  // inizializzazione array di risultati aspettati",
							"  // l'ordine degli elementi in questo array deve",
							"  // essere coerente con l'ordine dell'array delle",
							"  // combinazioni. ",
							"  expected_results = [",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 200, token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\"},",
							"    {status: 200, token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\"},",
							"    {status: 400, error: \"The username already exists in the database, please use another username\"},",
							"  ];",
							"}",
							"",
							"// Combinazione testata e relativo risultato aspettato",
							"var combination = combinations.shift();",
							"var result      = expected_results.shift();",
							"// eventuale body da passare sottoforma di stringa",
							"pm.variables.set(\"combination_signup\", JSON.stringify(combination));",
							"// Set necessario affinche' le variabili siano accessibili",
							"// da test scripts",
							"pm.environment.set(\"combination_signup\", combination);",
							"pm.environment.set(\"result_signup\", result);",
							"pm.environment.set(\"left_signup\", combinations.length);",
							"// Aggiornamento delle variabili necessario altrimenti nel pre-script",
							"// si rileggerebbe il valore iniziale ciclando all'infinito.",
							"var combinations = pm.environment.set(\"combinations_signup\", combinations);",
							"var expected_results = pm.environment.set(\"expected_results_signup\", expected_results);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a4df4686-b3db-4469-9e3e-73f0485b1fdb",
						"exec": [
							"var body = pm.environment.get(\"combination_signup\");",
							"var expected_result = pm.environment.get(\"result_signup\"); ",
							"var left = pm.environment.get(\"left_signup\");",
							"",
							"if(left > 0) {",
							"  postman.setNextRequest(\"signup\");",
							"} else {",
							"    // todo: cambiare in signin",
							"   postman.setNextRequest(\"signin\"); ",
							"}",
							"",
							"// todo: inserire test qui...",
							"  pm.test(\"Check status\", function () {",
							"    pm.expect(pm.response.code).to.be.eql(expected_result.status);",
							"  });",
							"",
							"  if ( pm.response.code === 400 ) {",
							"    pm.test(\"Check error message\", function () {",
							"        pm.expect(pm.response.json().error).to.be.eql(expected_result.error);",
							"    });",
							"  }",
							"",
							"  if (pm.response.code === 200 ) {",
							"      pm.test(\"Check token\", function () {",
							"        pm.expect(pm.response.json().token).to.not.undefined;",
							"        let token = pm.response.json().token; ",
							"        let r_tok_head = token.split(\".\")[0];",
							"        //let r_tok_pay = token.split(\".\")[1];",
							"        let e_tok_head = expected_result.token.split(\".\")[0];",
							"        //let e_tok_pay = expected_result.token.split(\".\")[1];",
							"        pm.expect(r_tok_head).to.be.eql(e_tok_head);",
							"        //pm.expect(r_tok_pay).to.be.eql(e_tok_pay);  ",
							"      });",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{combination_signup}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:3200/auth/signup",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "signin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0621126f-8343-4f90-8bed-0c0ae96761c6",
						"exec": [
							"var combinations     = pm.environment.get(\"combinations_signin\");",
							"var expected_results = pm.environment.get(\"expected_results_signin\"); ",
							"",
							"if (!combinations) {",
							"  // inizializzazione array di combinazioni da testare  ",
							"  combinations = [",
							"    \"ciao\",",
							"    {},",
							"    {user: \"hello\"},",
							"    {username: \"hello\"},",
							"    {pas: \"hello\"},",
							"    {password: \"hello\"},",
							"    {paco: \"hello\"},",
							"    {mac_address: \"hello\"},",
							"    {username: \"hello\", password: \"hithere\"},",
							"    {username: \"hello\", mac_address: \"hithere\"},",
							"    {username: 1, password: \"hithere\", mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"renato\", password: 1, mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"renato\", password: \"hithere\", mac_address: 1},    ",
							"    {username: 1, password: true, mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: 1, password: \"true\", mac_address: true},",
							"    {username: \"1\", password: true, mac_address: false},",
							"    {username: 1, password: true, mac_address: 1},",
							"    {use: \"aa\", pas: \"true\", mac: \"aaa\"},",
							"    {username: \"aa\", pas: \"true\",  mac: \"aaa\"},",
							"    {username: \"aa\", password: \"true\", mac: \"aaa\"},",
							"    {username: \"renato!\", password: \"123456\",  mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"renatÃ²\", password: \"123456\", mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"ren at0\", password: \"123456\",  mac_address: \"aa:bb:cc:dd:ee:ff\"},",
							"    {username: \"renato\", password: \"123456\",  mac_address: \"aa:bb:cc:dd:ee:ff:aa\"},  ",
							"    {username: \"renato\", password: \"123456\",  mac_address: \"aa:bb:cc:dd:ee:ff\"}, ",
							"  ];",
							"}",
							"",
							"if (!expected_results) {",
							"  // inizializzazione array di risultati aspettati",
							"  // l'ordine degli elementi in questo array deve",
							"  // essere coerente con l'ordine dell'array delle",
							"  // combinazioni. ",
							"  expected_results = [",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 400, error: \"The format of the request is wrong!\"},",
							"    {status: 200, token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\"},",
							"  ];",
							"}",
							"",
							"// Combinazione testata e relativo risultato aspettato",
							"var combination = combinations.shift();",
							"var result      = expected_results.shift();",
							"// eventuale body da passare sottoforma di stringa",
							"pm.variables.set(\"combination_signin\", JSON.stringify(combination));",
							"// Set necessario affinche' le variabili siano accessibili",
							"// da test scripts",
							"pm.environment.set(\"combination_signin\", combination);",
							"pm.environment.set(\"result_signin\", result);",
							"pm.environment.set(\"left_signin\", combinations.length);",
							"// Aggiornamento delle variabili necessario altrimenti nel pre-script",
							"// si rileggerebbe il valore iniziale ciclando all'infinito.",
							"var combinations     = pm.environment.set(\"combinations_signin\", combinations);",
							"var expected_results = pm.environment.set(\"expected_results_signin\", expected_results);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "277a9a07-f520-4a73-89c1-9d19addf5a1e",
						"exec": [
							"var body = pm.environment.get(\"combination_signin\");",
							"var expected_result = pm.environment.get(\"result_signin\"); ",
							"var left = pm.environment.get(\"left_signin\"); ",
							"",
							"if(left > 0) {",
							"  postman.setNextRequest(\"signin\");",
							"} else {",
							"   postman.setNextRequest(null); ",
							"}",
							"",
							"  if ( pm.response.code === 400 ) {",
							"    pm.test(\"Check error message\", function () {",
							"        pm.expect(pm.response.json().error).to.be.eql(expected_result.error);",
							"    });",
							"  }",
							"",
							"  if (pm.response.code === 200 ) {",
							"      pm.test(\"Check token\", function () {",
							"        pm.expect(pm.response.json().token).to.not.undefined;",
							"        let token = pm.response.json().token; ",
							"        let r_tok_head = token.split(\".\")[0];",
							"        //let r_tok_pay = token.split(\".\")[1];",
							"        let e_tok_head = expected_result.token.split(\".\")[0];",
							"        //let e_tok_pay = expected_result.token.split(\".\")[1];",
							"        pm.expect(r_tok_head).to.be.eql(e_tok_head);",
							"        //pm.expect(r_tok_pay).to.be.eql(e_tok_pay);  ",
							"      });",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{combination_signin}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:3200/auth/signin",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "dbuser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9bba3dd7-b8a5-43e8-9bbd-d331528cfc76",
						"exec": [
							"var combinations     = pm.environment.get(\"combinations_signup\");",
							"var expected_resutls = pm.environment.get(\"expected_resutls_signup\"); ",
							"",
							"if (!combinations) {",
							"  // inizializzazione array di combinazioni da testare  ",
							"  combinations = [",
							"  ];",
							"}",
							"",
							"if (!expected_resutls) {",
							"  // inizializzazione array di risultati aspettati",
							"  // l'ordine degli elementi in questo array deve",
							"  // essere coerente con l'ordine dell'array delle",
							"  // combinazioni. ",
							"  expected_resutls = [",
							"  ];",
							"}",
							"",
							"// Combinazione testata e relativo risultato aspettato",
							"var combination = combinations.shift();",
							"var result      = expected_resutls.shift();",
							"// Set necessario affinche' le variabili siano accessibili",
							"// da test scripts",
							"pm.environment.set(\"combination_signup\", combination);",
							"pm.environment.set(\"result_signup\", result);",
							"pm.environment.set(\"left_signup\", combinations.length);",
							"// Aggiornamento delle variabili necessario altrimenti nel pre-script",
							"// si rileggerebbe il valore iniziale ciclando all'infinito.",
							"var combinations     = pm.environment.set(\"combinations_signup\", combinations);",
							"var expected_resutls = pm.environment.set(\"expected_resutls_signup\", expected_resutls); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:3200/test/database/users/0",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "3200",
					"path": [
						"test",
						"database",
						"users",
						"0"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}